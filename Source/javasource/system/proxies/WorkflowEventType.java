// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package system.proxies;

/**
 * The type of the event that occurred on the workflow. The event can relate to just the workflow or to a workflow activity.
 */
public enum WorkflowEventType
{
	WorkflowCompleted(new java.lang.String[][] { new java.lang.String[] { "en_US", "WorkflowCompleted" } }),
	WorkflowInitiated(new java.lang.String[][] { new java.lang.String[] { "en_US", "WorkflowInitiated" } }),
	WorkflowRestarted(new java.lang.String[][] { new java.lang.String[] { "en_US", "WorkflowRestarted" } }),
	WorkflowFailed(new java.lang.String[][] { new java.lang.String[] { "en_US", "WorkflowFailed" } }),
	WorkflowAborted(new java.lang.String[][] { new java.lang.String[] { "en_US", "WorkflowAborted" } }),
	WorkflowPaused(new java.lang.String[][] { new java.lang.String[] { "en_US", "WorkflowPaused" } }),
	WorkflowUnpaused(new java.lang.String[][] { new java.lang.String[] { "en_US", "WorkflowUnpaused" } }),
	WorkflowRetried(new java.lang.String[][] { new java.lang.String[] { "en_US", "WorkflowRetried" } }),
	WorkflowUpdated(new java.lang.String[][] { new java.lang.String[] { "en_US", "WorkflowUpdated" } }),
	WorkflowUpgraded(new java.lang.String[][] { new java.lang.String[] { "en_US", "WorkflowUpgraded" } }),
	WorkflowConflicted(new java.lang.String[][] { new java.lang.String[] { "en_US", "WorkflowConflicted" } }),
	WorkflowResolved(new java.lang.String[][] { new java.lang.String[] { "en_US", "WorkflowResolved" } }),
	WorkflowJumpToOptionApplied(new java.lang.String[][] { new java.lang.String[] { "en_US", "WorkflowJumpToOptionApplied" } }),
	StartEventExecuted(new java.lang.String[][] { new java.lang.String[] { "en_US", "StartEventExecuted" } }),
	EndEventExecuted(new java.lang.String[][] { new java.lang.String[] { "en_US", "EndEventExecuted" } }),
	DecisionExecuted(new java.lang.String[][] { new java.lang.String[] { "en_US", "DecisionExecuted" } }),
	JumpExecuted(new java.lang.String[][] { new java.lang.String[] { "en_US", "JumpExecuted" } }),
	ParallelSplitExecuted(new java.lang.String[][] { new java.lang.String[] { "en_US", "ParallelSplitExecuted" } }),
	ParallelMergeExecuted(new java.lang.String[][] { new java.lang.String[] { "en_US", "ParallelMergeExecuted" } }),
	CallWorkflowStarted(new java.lang.String[][] { new java.lang.String[] { "en_US", "CallWorkflowStarted" } }),
	CallWorkflowEnded(new java.lang.String[][] { new java.lang.String[] { "en_US", "CallWorkflowEnded" } }),
	CallMicroflowStarted(new java.lang.String[][] { new java.lang.String[] { "en_US", "CallMicroflowStarted" } }),
	CallMicroflowEnded(new java.lang.String[][] { new java.lang.String[] { "en_US", "CallMicroflowEnded" } }),
	WaitForNotificationStarted(new java.lang.String[][] { new java.lang.String[] { "en_US", "WaitForNotificationStarted" } }),
	WaitForNotificationEnded(new java.lang.String[][] { new java.lang.String[] { "en_US", "WaitForNotificationEnded" } }),
	WaitForTimerStarted(new java.lang.String[][] { new java.lang.String[] { "en_US", "WaitForTimerStarted" } }),
	WaitForTimerEnded(new java.lang.String[][] { new java.lang.String[] { "en_US", "WaitForTimerEnded" } }),
	UserTaskStarted(new java.lang.String[][] { new java.lang.String[] { "en_US", "UserTaskStarted" } }),
	MultiUserTaskOutcomeSelected(new java.lang.String[][] { new java.lang.String[] { "en_US", "MultiUserTaskOutcomeSelected" } }),
	UserTaskEnded(new java.lang.String[][] { new java.lang.String[] { "en_US", "UserTaskEnded" } });

	private final java.util.Map<java.lang.String, java.lang.String> captions;

	private WorkflowEventType(java.lang.String[][] captionStrings)
	{
		this.captions = new java.util.HashMap<>();
		for (java.lang.String[] captionString : captionStrings) {
			captions.put(captionString[0], captionString[1]);
		}
	}

	public java.lang.String getCaption(java.lang.String languageCode)
	{
		return captions.getOrDefault(languageCode, "en_US");
	}

	public java.lang.String getCaption()
	{
		return captions.get("en_US");
	}
}
