// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package taskqueuehelpers.actions;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataTable;
import com.mendix.systemwideinterfaces.connectionbus.requests.types.IOQLTextGetRequest;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import system.proxies.QueuedTask;
import taskqueuehelpers.proxies.QueueCount;
import java.util.stream.Collectors;
import com.mendix.systemwideinterfaces.core.UserAction;

/**
 * Creates a List of QueueCount entities grouped by queue name. The grouping will aggregate the open count and running count of each queue.
 */
public class GetQueueCounts extends UserAction<java.util.List<IMendixObject>>
{
	public GetQueueCounts(IContext context)
	{
		super(context);
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		final IContext ctx = getContext();

		final IOQLTextGetRequest request = Core.createOQLTextGetRequest();
		request.setQuery(QUERY);
		final IDataTable allTasks = Core.retrieveOQLDataTable(ctx, request);

		return allTasks.getRows().stream().map(row -> {
			final QueueCount count = new QueueCount(ctx);
			count.setQueueName(row.getValue(ctx, 0));
			count.setRunningCount(row.getValue(ctx, 1));
			count.setWaitingCount(row.getValue(ctx, 2));
			return count.getMendixObject();
		}).collect(Collectors.toList());
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "GetQueueCounts";
	}

	// BEGIN EXTRA CODE
	private static final String QUERY = String.format(
			"select %s, %s, %s from %s group by %s",
			QueuedTask.MemberNames.QueueName,
			threadIdCount("is not null"),
			threadIdCount("is null"),
			QueuedTask.entityName,
			QueuedTask.MemberNames.QueueName);

	private static String threadIdCount(String comparison) {
		return String.format(
				"sum(case when %s %s then cast(1 as long) else cast(0 as long) end)",
				QueuedTask.MemberNames.ThreadId,
				comparison);
	}
	// END EXTRA CODE
}
