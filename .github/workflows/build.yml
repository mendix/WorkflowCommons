# This is a basic workflow to help you get started with Actions

name: Mendix workflow-commons

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          path: 'workflow-commons'

      - uses: actions/checkout@v2
        with:
          # Repository name with owner. For example, actions/checkout
          # Default: ${{ github.repository }}
          repository: 'mendix/docker-mendix-buildpack'

          # The branch, tag or SHA to checkout. When checking out the repository that
          # triggered a workflow, this defaults to the reference or SHA for that event.
          # Otherwise, uses the default branch.


          # Relative path under $GITHUB_WORKSPACE to place the repository
          path: 'build-pack'


      # Runs a single command using the runners shell
      - name: Create build directory
        run: mkdir build-pack/build

      - name: Copy file
        run: cp -v -r workflow-commons/Source/. build-pack/build

      # Runs a set of commands using the runners shell
      - name: Build docker image
        run: |
          cd build-pack
          make build-image

      - name: Run docker image
        run: |
          cd build-pack
          make run-container &
          timeout 60s bash -c 'until curl -s http://localhost:8080 | grep "<title>Mendix</title>"; do sleep 5; done'

      - name: Start unit tests
        run: |
          timeout 60s bash -c 'until curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/rest/wfcunittest/v1/wfcunittests/start | grep "204"; do sleep 5; done'

      - name: Check status of unit tests
        run:  |
          mkdir $GITHUB_WORKSPACE/results
          timeout 120s \
            bash -c \
               'until \
                  curl -s -H "Accept: application/json" -o $GITHUB_WORKSPACE/results/test_results.json -w "%{http_code}" http://localhost:8080/rest/wfcunittest/v1/wfcunittests/status | grep "200" && \
                  cat $GITHUB_WORKSPACE/results/test_results.json | jq ".Result" | grep "_3_Success"; \
                do sleep 5; done' \
            || true
          if ! cat $GITHUB_WORKSPACE/results/test_results.json | jq ".Result" | grep "_3_Success" ; then
            cat $GITHUB_WORKSPACE/results/test_results.json
            echo “Failed to execute tests”
            exit 1
          fi
