name: Mendix WorkflowCommons

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out current repository under $GITHUB_WORKSPACE/app folder
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3
        with:
          path: 'app'

      # Checks-out mendix/docker-mendix-buildpack to $GITHUB_WORKSPACE/build-pack folder
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3
        with:
          repository: 'mendix/docker-mendix-buildpack'
          path: 'build-pack'

      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3
        with:
          repository: 'mendixlabs/mx-docker-tools'
          path: 'mx-tools'

      - name: Define MX_VERSION
        run: |
          cd $GITHUB_WORKSPACE/app/Source
          VERSION=$(sqlite3 ExpenseRequestStarterApp.mpr 'SELECT _ProductVersion FROM _MetaData LIMIT 1')
          echo "Detected MX Version:$VERSION"
          echo "MX_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create build directory
        run: mkdir build-pack/build
      
      - name: Create output directory
        run: mkdir $GITHUB_WORKSPACE/out

      - name: Copy application files to build directory
        run: cp -v -r app/Source/. build-pack/build

      - name: Build docker image
        run: |
          cd build-pack
          make build-image

      - name: Run docker image
        run: |
          cd build-pack
          make run-container &
          timeout 60s bash -c 'until curl -s http://localhost:8080 | grep "<title>Mendix</title>"; do sleep 5; done'

      - name: Start unit tests
        run: |
          timeout 60s bash -c 'until curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/rest/wfcunittest/v1/wfcunittests/start | grep "204"; do sleep 5; done'

      - name: Check status of unit tests
        run: |
          timeout 120s \
            bash -c \
               'until \
                  curl -s -H "Accept: application/json" -o $GITHUB_WORKSPACE/out/test_results.json -w "%{http_code}" http://localhost:8080/rest/wfcunittest/v1/wfcunittests/status | grep "200" && \
                  cat $GITHUB_WORKSPACE/out/test_results.json | jq ".Result" | grep "_3_Success"; \
                do sleep 5; done' \
            || true
          if ! cat $GITHUB_WORKSPACE/out/test_results.json | jq ".Result" | grep "_3_Success" ; then
            echo "Failed to execute tests"
            exit 1
          fi

      - name: Check Release notes and make new release tag
        run: |
          Organization="mendix"
          Project="WorkflowCommons"
          ReleaseNotesFile="ReleaseNotes.md"
          ReleaseTag=$(curl https://api.github.com/repos/$Organization/$Project/releases/latest -s | jq .tag_name -r | tr -d '[:space:]')
          echo "Detected release tag in github:\"$ReleaseTag\""
          cd $GITHUB_WORKSPACE/app
          DeclaredRelease=$(sed -n 's/^## Release //p' $ReleaseNotesFile | head -n 1 | tr -d '[:space:]')
          echo "Declared release in the local file:\"$DeclaredRelease\""
          if [ "$ReleaseTag" == "$DeclaredRelease" ]; then
            echo "There are no new changes in the file \"$ReleaseNotesFile\". Please add new version and release notes into this file before make a merge request."
            exit 1; 
          fi
          # Put release version into env variable
          echo "NEW_RELEASE_VERSION=$DeclaredRelease" >> $GITHUB_ENV
          # Make a correct file name
          BinaryFileName="WorkflowCommons-$(echo "$DeclaredRelease" | sed 's/\./-/g').mpk"
          echo "NEW_RELEASE_BIN_FILE=$BinaryFileName" >> $GITHUB_ENV
          StartLine="## Release $DeclaredRelease"
          EndLine="_______"
          # Get release notes using "awk" and trin first and last lines usin "sed"
          ReleseNotes=$(awk "/$StartLine/,/$EndLine/" $ReleaseNotesFile | sed 1d | sed '$ d')
          echo "Release notest from file: $ReleseNotes"
          # Put release notes into output path
          echo "$ReleseNotes" | tee $GITHUB_WORKSPACE/out/ReleaseNotes.md

      - name: Build MX Util
        run: |
          cd $GITHUB_WORKSPACE/mx-tools
          make version=${{env.MX_VERSION}} build

      - name: Run MX Util
        run: |
          MX_TOOLS_IMAGE="mendixlabs/mx-docker-tools:"${{env.MX_VERSION}}
          mkdir $GITHUB_WORKSPACE/app/Source/packages
          docker run -v $GITHUB_WORKSPACE/app/Source:/opt/app -i $MX_TOOLS_IMAGE mxutil.exe create-module-package --package-dir /opt/app/packages /opt/app/ExpenseRequestStarterApp.mpr "WorkflowCommons" --exclude-files="(resources|userlib)" | tee $GITHUB_WORKSPACE/out/mxutil.log
          cp -f $GITHUB_WORKSPACE/app/Source/packages/WorkflowCommons.mpk $GITHUB_WORKSPACE/app/Releases/${{env.NEW_RELEASE_BIN_FILE}}
          rm -rf $GITHUB_WORKSPACE/app/Source/packages

      - name: Delete rudiment widgets
        run: |
            TEMP_UNZIP_FOLDER="$GITHUB_WORKSPACE/TempUnzip"
            TARGET_MPK="$GITHUB_WORKSPACE/app/Releases/${{env.NEW_RELEASE_BIN_FILE}}"
            ALLOWED_LIST="$GITHUB_WORKSPACE/app/.github/workflows/AllowedWidgetsList.txt"

            if [! -f "$ALLOWED_LIST" ]; then 
              echo "Unable to find file AllowedWidgetsList.txt"
              exit 1; 
            fi

            if [ -d "$TEMP_UNZIP_FOLDER" ]; then rm -Rf $TEMP_UNZIP_FOLDER; fi
            mkdir $TEMP_UNZIP_FOLDER
            unzip -x $TARGET_MPK -d $TEMP_UNZIP_FOLDER

            cd "$TEMP_UNZIP_FOLDER/widgets"
            for i in *; do
              if ! grep -q "$i" $ALLOWED_LIST; then
                echo "Deleting widget: $i" | tee -a $GITHUB_WORKSPACE/out/deletedWidgets.log
                rm "$i"
                sed -i "/$i/d" $TEMP_UNZIP_FOLDER/package.xml
              fi
            done
            
            cd $TEMP_UNZIP_FOLDER
            zip -r ${{env.NEW_RELEASE_BIN_FILE}} *

            mv -f ${{env.NEW_RELEASE_BIN_FILE}} $GITHUB_WORKSPACE/app/Releases/

            if [ -d "$TEMP_UNZIP_FOLDER" ]; then rm -Rf $TEMP_UNZIP_FOLDER; fi

      - name: Commit release
        if: github.event_name != 'pull_request'
        run: |
            cd $GITHUB_WORKSPACE/app/Releases
            git config --global user.name 'Github Workflow'
            git config --global user.email 'noreply@github.com'
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
            git add ${{env.NEW_RELEASE_BIN_FILE}}
            git commit -am "Made relaes WorkflowCommons v. ${{env.NEW_RELEASE_VERSION}}"
            git push

      - name: Make release in Github
        if: github.event_name != 'pull_request'
        uses: softprops/action-gh-release@v1
        with:
          body_path: ./out/ReleaseNotes.md
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{env.NEW_RELEASE_VERSION}}
          name: Release ${{env.NEW_RELEASE_VERSION}}
          files: |
            ./app/Releases/${{env.NEW_RELEASE_BIN_FILE}}

      - name: Collect docker logs
        id: collectLogs
        if: ${{ always() }}
        run: docker ps -q | xargs -n 1 docker logs >> $GITHUB_WORKSPACE/out/docker.log

      - name: Archive results
        if: ${{ always() }}
        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2 # v2
        with:
          name: Results
          path: ${{ github.workspace }}/out/*
